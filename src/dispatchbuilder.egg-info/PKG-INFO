Metadata-Version: 2.4
Name: dispatchbuilder
Version: 0.1.0
Summary: Typed decorator-based multiple dispatch for functions, methods, and properties.
Author: Your Name
License: MIT License
        
        Copyright (c) 2025
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://example.com/dispatchbuilder
Project-URL: Documentation, https://example.com/dispatchbuilder/wiki
Project-URL: Source, https://example.com/dispatchbuilder/repo
Project-URL: Issues, https://example.com/dispatchbuilder/issues
Keywords: dispatch,overload,decorator,typing
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: pytest>=8.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1; extra == "dev"
Requires-Dist: mypy>=1.10; extra == "dev"
Requires-Dist: ruff>=0.4; extra == "dev"
Requires-Dist: black>=24.3; extra == "dev"
Requires-Dist: tox>=4.0; extra == "dev"
Dynamic: license-file

# dispatchbuilder

Typed decorator-based multiple dispatch for functions, methods, and even
property setters â€” all with clean `@dispatch.name(...)` syntax.

## Features

- Register overloads via decorators (function or method)
- Works with `Union`, `Optional`, `Annotated`, `Literal`, `ClassVar`
- Deterministic selection with clear tie-breaking rules
- Supports positional/keyword binding and caches decisions
- Zero runtime dependencies

## Quick start

```bash
pip install dispatchbuilder
```

```python
from dispatchbuilder import dispatch

def greet(name: str) -> str:
    return f"hello {name}"

@dispatch.greet
def _(name: int) -> str:
    return f"number {name}"

assert greet("Alice") == "hello Alice"
assert greet(3) == "number 3"
```

### Methods and properties

```python
from dispatchbuilder import dispatch

class Box:
    def add(self, value: int) -> int:
        return value + 1

    @dispatch.add
    def _(self, value: str) -> str:
        return value + "!"

    @property
    def x(self) -> int:
        return self._x

    @x.setter
    def x(self, v: int) -> None:
        self._x = v

    @dispatch.x(value=str)
    def _(self, value: str) -> None:
        self._x = len(value)

b = Box()
assert b.add(1) == 2
assert b.add("a") == "a!"
b.x = "hey"
assert b.x == 3
```

## Docs & Wiki

See the `wiki/` folder (or your repository wiki) for:
- Overview
- How it works
- API reference
- Recipes & tips

## Testing

```bash
pip install -e ".[dev]"
pytest
```

The test suite targets **>= 90% coverage** with `pytest-cov`.

## License

MIT. See [LICENSE](LICENSE).
